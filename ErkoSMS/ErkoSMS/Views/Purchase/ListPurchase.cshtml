@{
    ViewBag.Title = "Satın Alma Listele/Güncelle";
}

<h2>@ViewBag.Title</h2>

@using ErkoSMS.Enums
@model PurchaseFilterParameters

@{
    var suppliers = (List<SelectListItem>)ViewBag.Suppliers;
}

<div id="listPurchaseDiv" style="display: block;margin-top:20px;">
    <input type="button" id="filterButton" value="Satın Almaları Filtrele" />
    <input type="button" id="getPurchasesRequestedByOrders" value="İşleme Konulmamış Satın Alma Taleplerini Getir" />
    <input type="button" id="getAllPurchasesAssignedToMe" value="Satın Almalarımı Getir" />
    @if (User.IsInRole(UserTypes.Administrator.Name))
    {
        <input type="button" id="getAllPurchases" value="Bütün Satın Almaları Getir" />
    }
</div>
<hr style="margin: 10px 0;" />

<div id="PurchaseFilterDiv" style="display:none">
    @Html.AntiForgeryToken()
    <div class="row">
        <div class="form-group col-md-4">
            @Html.LabelFor(x => x.State)
            @Html.EnumDropDownListFor(x => x.State, new { id = "statedropdown", @class = "chosen-select form-control" })
        </div>
        <div class="form-group col-md-5">
            @Html.LabelFor(x => x.SupplierId)
            @Html.DropDownList("suppliers", suppliers, "Tedarikçi seçin", new { id = "supplierdropdown", @class = "chosen-select form-control" })
        </div>
        <div class="form-group col-md-2">
            <button type="button" id="getFilteredRecords" class="btn btn-primary pull-right">Filtrele</button>
        </div>
    </div>
</div>

<div style="margin-top: 20px">
    <table id="purchaseTable" class="table table-bordered table-condensed table-hover table-responsive table-striped"></table>
</div>


<script>
    var tb = $("#purchaseTable");

    $('#purchaseTable').on('click', 'td.editor-edit', function (e) {
        e.preventDefault();
        var rowToBeUpdated = $(this).closest('tr')[0];
        var purchaseId = rowToBeUpdated.cells[0].innerText;
        ERKOSMS.GetAjaxDialog("AssignPurchase?purchaseId=" + purchaseId, {}, false).then(function (data) {
            vex.dialog.alert("Satın alma sana atandı. Bütün satınalmalarımı getir diyerek listede görebilirsin");
            getNonAssignedPurchases();
        });
    });

    $('#purchaseTable').on('click', 'td.updateRecord', function (e) {
        e.preventDefault();
        var rowToBeUpdated = $(this).closest('tr')[0];
        var purchaseId = rowToBeUpdated.cells[0].innerText;
        ERKOSMS.GetAjaxDialog("UpdatePurchase?purchaseId=" + purchaseId, {}, false).then(function () {
            debugger;
        });
    });

    $('#purchaseTable').on('click', 'td.deleteRecord', function (e) {
        e.preventDefault();
        var rowToBeDeleted = $(this).closest('tr')[0]
        var purchaseId = rowToBeDeleted.cells[0].innerText;
        vex.dialog.confirm({
            message: "Seçilen satın alma silinecektir. Emin misiniz? ",
            callback: function (result) {
                if (result) {
                    ERKOSMS.AjaxAction("DeletePurchase?purchaseId=" + purchaseId, {}, false).then(function () {
                        rowToBeDeleted.remove();
                    }), function (data) {
                        ERKOSMS.ShowWarning(data);
                    }
                }
            }
        });
    });

    var destroyTable = function () {
        var tb = $("#purchaseTable");

        if ($.fn.dataTable.isDataTable(tb))
            tb.DataTable().destroy();

        tb.empty();
    };
    var formatDate = function (date) {
        if (date == null) {
            return '';
        }
        else {
            return window.moment(date).format("DD-MM-YYYY");
        }

    }
    var formatCurrency = function (data) {
        if (data == 0) {
            return "TL";
        }
        else if (data == 1) {
            return "EUR";
        }
        else if (data == 2) {
            return "USD";
        }
    }
    var formatState = function (data) {
        if (data == -1) {
            return "";
        }
        else if (data == 0) {
            return "Satın Alma Talep Edildi";
        }
        else if (data == 1) {
            return "Satın Alma İşleme Alındı";
        }
        else if (data == 2) {
            return "Satın Alma Başarılı";
        }
        else if (data == 3) {
            return "Satın Alma Başarısız";
        }
    }

    $('#getFilteredRecords').on('click', function () {
        destroyTable();
        var supplierId = $('#supplierdropdown').val();
        var state = $('#statedropdown').val();
        ERKOSMS.AjaxAction("GetFilteredPurchases", {
            type: 'POST', data: {
                supplierId: supplierId, state: state
            }
        }).then(function (data) {
            var datatable = tb.DataTable({
                autoWidth: true,
                columns: [
                    { title: "Id", data: "PurchaseId" },
                    { title: "Satın Alma Giriş Tarihi", data: "PurchaseStartDate", className:'data' },
                    { title: "Durum", data: "PurchaseState", className: 'data' },
                    { title: "Ürün Kodu", data: "ProductCode", className: 'data' },
                    { title: "Adet", data: "Quantity", className: 'data' },
                    { title: "Birim Fiyat", data: "UnitPrice", className: 'data' },
                    { title: "Tutar", data: "TotalPrice", className: 'data' },
                    { title: "Kur", data: "Currency", className: 'data' },
                    { title: "Satış Elemanı", data: "SalesUserName", className: 'data' },
                    { title: "Süre(gün)", data: "ActiveTime", className: 'data' },
                    { title: "Tedarikçi", data: "SupplierName", className: 'data' },
                    { title: "Yorum", data: "Comment", className: 'data' },
                    {
                        data: null,
                        className: "dt-center updateRecord",
                        defaultContent: '<span class="btn btn-warning"><span class="glyphicon glyphicon-pencil"></span>Güncelle</span>',
                        orderable: false
                    },
                    {
                        data: null,
                        className: "dt-center deleteRecord",
                        defaultContent: '<span class="btn btn-danger"><span class="glyphicon glyphicon-pencil"></span>Sil</span>',
                        orderable: false
                    }
                ],
                data: data,
                sDom: '<"top"Blif<"clear">>rt<"bottom"ip<"clear">>',
                buttons: [
                    {
                        extend: 'pdfHtml5',
                        charset: 'UTF-8',
                        bom: true,
                        text: '<button type="button" class="btn btn-primary pull-right"><span class="glyphicon glyphicon-export"></span>Dışa Aktar (PDF)</button ><br>',
                        exportOptions: {
                            columns: ".data"
                        },
                        filename: function () {
                            var dateNow = window.moment(new Date(), "DD.MM.YYYY").format("DD_MM_YYYY_HHmmss");
                            return "Satın_Alma_Talepleri_" + dateNow;
                        },
                    }],
                aaSorting: [], // Initial sorting
                bInfo: true, // Info is not shown because the total count to show is not known
                searching: true, // Disable searching TODO: Enable searching if necessary
                paging: true, // Disable paging in outstanding
                pageLength: 50,
                deferRender: true,
                columnDefs: [
                    {
                        targets: [1],
                        render: formatDate
                    },
                    {
                        targets: [7],
                        render: formatCurrency
                    },
                    {
                        targets: [2],
                        render: formatState
                    }
                ]
            });
        });
    });
    var getPurchases = function (ajaxAction) {
        destroyTable();
        ERKOSMS.AjaxAction(ajaxAction, {
            type: 'POST'
        }).then(function (data) {
            var columns = [
                { title: "Id", data: "PurchaseId" },
                { title: "Satın Alma Giriş Tarihi", data: "PurchaseStartDate", className: 'data' },
                { title: "Durum", data: "PurchaseState", className: 'data' },
                { title: "Ürün Kodu", data: "ProductCode", className: 'data' },
                { title: "Adet", data: "Quantity", className: 'data' },
                { title: "Birim Fiyat", data: "UnitPrice", className: 'data' },
                { title: "Tutar", data: "TotalPrice", className: 'data' },
                { title: "Kur", data: "Currency", className: 'data' },
                { title: "Satış Elemanı", data: "SalesUserName", className: 'data' },
                { title: "Süre(gün)", data: "ActiveTime", className: 'data' },
                { title: "Tedarikçi", data: "SupplierName", className: 'data' },
                { title: "Yorum", data: "Comment", className: 'data' },
                {
                    data: null,
                    className: "dt-center updateRecord",
                    defaultContent: '<span class="btn btn-warning"><span class="glyphicon glyphicon-pencil"></span>Güncelle</span>',
                    orderable: false
                },
                {
                    data: null,
                    className: "dt-center deleteRecord",
                    defaultContent: '<span class="btn btn-danger"><span class="glyphicon glyphicon-pencil"></span>Sil</span>',
                    orderable: false
                }
            ];

            if (ajaxAction === "GetNonAssignedPurchases") {
                columns.push({
                    data: null,
                    className: "dt-center editor-edit",
                    defaultContent: '<span class="btn btn-warning"><span class="glyphicon glyphicon-pencil"></span>Bana Ata</span>',
                    orderable: false
                });
            }
            var datatable = tb.DataTable({
                autoWidth: true,
                columns: columns,
                data: data,
                data: data,
                sDom: '<"top"Blif<"clear">>rt<"bottom"ip<"clear">>',
                buttons: [
                    {
                        extend: 'pdfHtml5',
                        charset: 'UTF-8',
                        bom: true,
                        text: '<button type="button" class="btn btn-primary pull-right"><span class="glyphicon glyphicon-export"></span>Dışa Aktar (PDF)</button ><br>',
                        exportOptions: {
                            columns: ".data"
                        },
                        filename: function () {
                            var dateNow = window.moment(new Date(), "DD.MM.YYYY").format("DD_MM_YYYY_HHmmss");
                            return "Satın_Alma_Talepleri_" + dateNow;
                        },
                    }],
                aaSorting: [], // Initial sorting
                bInfo: true, // Info is not shown because the total count to show is not known
                searching: true, // Disable searching TODO: Enable searching if necessary
                paging: true, // Disable paging in outstanding
                pageLength: 50,
                deferRender: true,
                columnDefs: [
                    {
                        targets: [1],
                        render: formatDate
                    },
                    {
                        targets: [7],
                        render: formatCurrency
                    },
                    {
                        targets: [2],
                        render: formatState
                    }
                ]
            });
        });
    }
    var getNonAssignedPurchases = function () {
        return getPurchases("GetNonAssignedPurchases");
    }
    var getPurchasesAssignedToMe = function () {
        return getPurchases("GetPurchasesAssignedToMe");
    }
    var getAllPurchases = function () {
        return getPurchases("GetAllPurchases");
    }

    $('#getPurchasesRequestedByOrders').on('click', getNonAssignedPurchases);
    $('#getAllPurchasesAssignedToMe').on('click', getPurchasesAssignedToMe);
    $('#getAllPurchases').on('click', getAllPurchases);

    $('#filterButton').on('click', function () {

        var visibility = document.getElementById("PurchaseFilterDiv").style.display;
        if (visibility === "none") {
            document.getElementById("PurchaseFilterDiv").style.display = "block";
            $('#statedropdown').select2({ placeholder: "Durum Seçin" });
            $('#supplierdropdown').select2({ placeholder: "Tedarikçi Seçin" });
        }
        else {
            document.getElementById("PurchaseFilterDiv").style.display = "none";
        }
    });

    getAllPurchases();
</script>
