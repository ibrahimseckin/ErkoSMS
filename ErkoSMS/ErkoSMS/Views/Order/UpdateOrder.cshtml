
@model ErkoSMS.ViewModels.OrderViewModel

@{
    var customers = (List<SelectListItem>)ViewBag.Customers;
    var salesState = (List<SelectListItem>)ViewBag.SaleStates;
    var currencies = (List<SelectListItem>)ViewBag.Currencies;
    var exporters = (List<SelectListItem>)ViewBag.Exporters;
}

<div>
    <div class="row mt-10">
        <div class="col-sm-6">
            <h3>Order Güncelle</h3>
        </div>
        <div class="col-sm-6">
            <button type="button" id="invoiceButton" class="btn btn-success pull-right mr-10 mt-20">
                <span class="glyphicon glyphicon-export"></span> Fatura Al
            </button>
        </div>

    </div>

    <hr />
    @using (Html.BeginForm("UpdateOrder", "Order", FormMethod.Post, new { data_erkosms_role = "ajax-form", id = "UpdateOrderForm", style = "width:1100px" }))
    {
        @Html.Hidden("OrderId", Model.OrderId)
        @Html.AntiForgeryToken()
        @Html.ValidationSummary("", new { @class = "text-danger" })
        <div class="row">
            <div class="col-sm-12 col-lg-9">
                <div class="row">
                    <div class="form-group col-md-4">
                        <label>İthalatçı:</label>
                        @Html.DropDownListFor(x => x.Exporter.Id, exporters,"Bir İthalatçı Seçin",new { id = "exporterdropdown", @class = "chosen-select form-control" })
                    </div>
                    <div class="form-group col-md-4">
                        <label>Müşteri:</label>
                        @Html.DropDownListFor(x => x.Customer.Id, customers, new { id = "customerdropdown", @class = "chosen-select form-control" })
                    </div>
                    <div class="form-group col-md-4">
                        @Html.LabelFor(x => x.InvoiceNumber)
                        @Html.TextBoxFor(x => x.InvoiceNumber, new { @class = "chosen-select form-control", Name = "InvoiceNumber", id = "InvoiceTextBox", style = "display:inline-block" })
                    </div>
                </div>
                <div class="row">
                    <div class="form-group col-md-4">
                        @Html.LabelFor(model => model.InvoiceDate)
                        @Html.TextBoxFor(model => model.InvoiceDate, new { Name = "InvoiceDate", @class = "form-control datepicker", id = "invoiceDate", placeholder = "Enter Drop-off date here..." })
                    </div>
                    <div class="form-group col-md-4">
                        <label>Durum:</label>
                        @Html.EnumDropDownListFor(x => x.State, new { id = "statedropdown", @class = "chosen-select form-control" })
                    </div>
                    <div class="form-group col-md-2">
                        <label>Kur:</label>
                        @Html.EnumDropDownListFor(x => x.Currency, new { id = "currencydropdown", @class = "chosen-select form-control" })
                    </div>
                    <div class="form-group col-md-3" id="exchangeRateDiv" style="display: none">
                        <label>Doviz Kuru:</label>
                        <input id="exchangeRate" name="ExchangeRate" type="number" step="0.0001" placeholder="0.0000" value="@Model.ExchangeRate"/>
                    </div>
                </div>
            </div>
        </div>
        <div id="products" style="overflow: hidden;">
            <div class="row">
                <div class="col-sm-10">
                    <h3>Ürün Listesi</h3>
                </div>
                <div class="col-sm-2">
                    <div id="addProductDiv">
                        <div class="clearfix">
                            <button type="button" id="addOrderLineButton" class="btn btn-primary">
                                <span class="glyphicon glyphicon-plus"></span> Yeni Ürün Ekle
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <span id="noProductInfo" style="display: @(Model.OrderLines.Any() ? "none" : "block")"> Satışa ekli bir ürün bulunmamaktadır</span>


            @foreach (var orderLine in Model.OrderLines)
            {

                @Html.Action("OrderRow", "Order", new { orderLine })
            }
        </div>
        <input type="submit" class="btn btn-primary pull-right" value="Güncelle" />
    }

</div>

<script>
    $('.datepicker').datepicker({ dateFormat: 'dd.mm.yy' }); //Initialise any date pickers
    $('#customerdropdown').select2({ placeholder: "Müşteri Seçin", dropdownParent: $('.vex') });
    $('#currencydropdown').select2({ placeholder: "Kur Seçin", dropdownParent: $('.vex') });
    $('#statedropdown').select2({ placeholder: "Durum Seçin", dropdownParent: $('.vex') });

    var InitializeScriptsForButtons = function () {
        $('.stockButton').off().on('click', function (e) {
            var productCode = e.currentTarget.parentNode.parentNode.querySelector('.productCode').value;
            ERKOSMS.AjaxAction("GetStockInformationByProductCode?productCode=" + productCode, {}, false).then(function (data) {
                e.currentTarget.parentNode.parentNode.parentNode.querySelector('.stockQuantity').value = data;
                e.currentTarget.parentNode.parentNode.parentNode.querySelector('.stockQuantity').readOnly = true;
            });
            ERKOSMS.AjaxAction("GetLatestPriceForProductCode?productCode=" + productCode, {}, false).then(function (data) {
                e.currentTarget.parentNode.parentNode.parentNode.querySelector('.stockPrice').value = data;
                e.currentTarget.parentNode.parentNode.parentNode.querySelector('.stockPrice').readOnly = true;
            });
            ERKOSMS.AjaxAction("GetProductDescriptionByProductCode?productCode=" + productCode, {}, false).then(function (data) {
                var [description,englishDescription] = data.substr(1, data.length - 2).split(",");
                e.currentTarget.parentNode.parentNode.parentNode.querySelector('.productDescription').value = description;
                e.currentTarget.parentNode.parentNode.parentNode.querySelector('.productDescription').readOnly = true;

                e.currentTarget.parentNode.parentNode.parentNode.querySelector('.productEnglishDescription').value = englishDescription;
                e.currentTarget.parentNode.parentNode.parentNode.querySelector('.productEnglishDescription').readOnly = true;
            });
        });
        $('.calculatePriceButton').off().on('click', function (e) {
            var exchangeRate = IsSelectedCurrencyDifferentThaTL() ? parseFloat($("#exchangeRate").val()) : 1;
            var quantity = e.currentTarget.parentNode.parentNode.parentNode.querySelector('.quantity').value;
            var unitPrice = e.currentTarget.parentNode.parentNode.parentNode.querySelector('.unitPrice').value;
            e.currentTarget.parentNode.parentNode.parentNode.querySelector('.totalPrice').value = quantity * unitPrice;
            e.currentTarget.parentNode.parentNode.parentNode.querySelector('.totalPrice').readOnly = true;
            e.currentTarget.parentNode.parentNode.parentNode.querySelector('.totalPriceTL').value = quantity * unitPrice * exchangeRate;
            e.currentTarget.parentNode.parentNode.parentNode.querySelector('.totalPriceTL').readOnly = true;
        });

        $("#UpdateOrderForm").off().on("click", ".orderRowDeleteButton", function () {
            $(this).closest('.orderRow').remove();
            if ($(".orderRow").length === 0) {
                $("#noProductInfo").show();
            }
        });

        $("#UpdateOrderForm").on("ajax-form:succeed", function (ev, data) {
            var tg = $(ev.currentTarget);
            closeParentVexModal(tg);
            $("#getAllOrders").click();
        });

        $("#UpdateOrderForm").on("submit", function () {
            $(".calculatePriceButton").click();
            return true;
        });

        $("#currencydropdown").on('change', function (ev, data) {
            if (IsSelectedCurrencyDifferentThaTL()) {
                $("#exchangeRateDiv").show();
            }
            else {
                $("#exchangeRateDiv").hide();

            }
        });

        var IsSelectedCurrencyDifferentThaTL = function () {
            var selectedCurrency = $('#currencydropdown').select2('data')[0].text;
            return selectedCurrency.toLowerCase() !== "tl";
        }

        $("#exchangeRate").on("change", function (ev, data) {
            this.value = parseFloat(this.value).toFixed(4);
        });


        $("#exchangeRate").val(parseFloat($("#exchangeRate").val()).toFixed(4));


        if (IsSelectedCurrencyDifferentThaTL()) {
            $("#exchangeRateDiv").show();
        }
    }

    $(function () {

        InitializeScriptsForButtons();

        var orderRowTemplate = '@Html.Template("OrderRow", null)';
        var addOrderRow = function () {
            var html = $($.parseHTML(orderRowTemplate));
            html.appendTo($("#products"));
            InitializeScriptsForButtons();
            $("#noProductInfo").hide();
        }

    $("#addOrderLineButton")
        .on('click', addOrderRow);

    });

    var addHeaderToEachPage = function(doc) {
        for (var i = 1; i <= doc.getNumberOfPages(); i++) {

            doc.setFont("times", "bold");
            doc.setFontSize(12);

            var width = doc.internal.pageSize.getWidth();
            doc.text(width / 2, 10, 'PROFORMA INVOICE', { align: 'center' });

            var invoiceNo = $("#InvoiceTextBox").val();
            var invoiceDate = moment($("#invoiceDate").val()).format("DD.MM.YYYY");
            doc.setFontSize(5);
            doc.text(175, 12, 'Invoice No    : ' + invoiceNo);
            doc.text(175, 14, 'Invoice Date : ' + invoiceDate);


            doc.setLineWidth(0.3);
            doc.setDrawColor(0, 0, 0);
            doc.roundedRect(10, 20, 95, 25,3,3, 'S');
            doc.setFontSize(8);

            doc.text(15, 25, 'IMPORTER:');
            doc.roundedRect(106, 20, 95, 25,3,3, 'S');
            doc.text(111, 25, 'EXPORTER:');


            doc.setFontSize(5);
            doc.setFont("times", "normal");
            var loremipsum = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor" +
                " incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation " +
                "ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in" +
                " voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non" +
                " proident, sunt in culpa qui officia deserunt mollit anim id est laborum.";
            var lines = doc.splitTextToSize(loremipsum, 80);
            doc.text(15, 30, lines);
            doc.text(111, 30, lines);

            doc.setPage(i);
        }
    }

    var addFooter = function (doc, totalCostofProducts) {
        var afterTable = doc.lastAutoTable.finalY + 10; // The y position on the page
        doc.setFontSize(8);
        doc.setFont("times", "bold");
        var currency = $("#currencydropdown").find(':selected').text();
        doc.text(170, afterTable, "TOTAL    " + currency,{align:"right"});
        doc.text(170, afterTable + 5, "TRANSPORT COST   " + currency, { align: "right"});
        doc.text(170, afterTable + 10, "TOTAL   " + currency, { align: "right" });

        doc.text(195, afterTable, totalCostofProducts.toFixed(2), { align: "right" });
        var transportCost = 3400.20;
        var totalCost = totalCostofProducts + transportCost;
        doc.text(195, afterTable + 5, transportCost.toFixed(2), { align: "right"});
        doc.text(195, afterTable + 10, totalCost.toFixed(2), { align: "right"});

        doc.setFont("times", "normal");
        doc.text(10, afterTable, "TOTAL PALLETES:   32 CASE",{align:"left"});
        doc.text(10, afterTable + 5, "TOTAL PIECE:  50970", { align: "left"});
        doc.text(10, afterTable + 10, "TOTAL NET WEIGHT:    7872 Kgs", { align: "left"});
        doc.text(10, afterTable + 15, "TOTAL GROSS WEIGHT:  8288 Kgs", { align: "left" });

        doc.text(10, afterTable + 25, "PAYMENT: 60 DAYS AFTER RECEIVING GOODS", { align: "left"});
        doc.text(10, afterTable + 30, "DELIVERY TERMS:  CIF", { align: "left" });
        debugger;
        doc.setFont("times", "bold");
        var words = toWords(totalCost);
        doc.text(10, afterTable + 40, words, { align: "left"});
        doc.text(10, afterTable + 45, "Bank Account", { align: "left"});
    }

    $("#invoiceButton").on('click',
        function() {
            var doc = new window.jspdf.jsPDF();

            var orderedProducts = [];
            var totalCost = 0.00;
                $(".orderRow").each((index,order) => {
                    var productCode = $(order).find(".productCode").val();
                    var description = $(order).find(".productEnglishDescription").val();
                    var quantity = $(order).find(".quantity").val();
                    var unitPrice = new Number($(order).find(".unitPrice").val());
                    var totalPrice = new Number($(order).find(".totalPrice").val());
                    totalCost += totalPrice;
                    var orderedProduct = [];
                    orderedProduct.push(productCode);
                    orderedProduct.push(description);
                    orderedProduct.push("ORIGIN");
                    orderedProduct.push(quantity);
                    orderedProduct.push(unitPrice.toFixed(2));
                    orderedProduct.push(totalPrice.toFixed(2));
                    orderedProducts.push(orderedProduct);
                });



            doc.autoTable({
                head: [['CODE', 'DESCRIPTION', 'ORIGIN','QTY','NET UNIT PRICE','TOTAL']],
                body: orderedProducts,
                theme: 'grid',
                margin: { top: 50, left: 10 },
                headStyles: { fillColor: [182, 191, 182]}
            });

            addHeaderToEachPage(doc);
            addFooter(doc,totalCost);

            var dateNow = window.moment(new Date(), "DD.MM.YYYY").format("DD_MM_YYYY_HHmmss");
            var filename = "Invoice_" + dateNow + ".pdf";
            doc.save(filename);
        });


</script>
