
@model ErkoSMS.ViewModels.OrderViewModel

@{
    var customers = (List<SelectListItem>)ViewBag.Customers;
    var salesState = (List<SelectListItem>)ViewBag.SaleStates;
    var currencies = (List<SelectListItem>)ViewBag.Currencies;
}

<div>
    <h3>Order Güncelle</h3>
    <hr />
    @using (Html.BeginForm("UpdateOrder", "Order", FormMethod.Post, new { data_erkosms_role = "ajax-form", id = "UpdateOrderForm", style = "width:1100px" }))
    {
        @Html.Hidden("OrderId", Model.OrderId)
        @Html.AntiForgeryToken()
        @Html.ValidationSummary("", new { @class = "text-danger" })
        <div class="row">
            <div class="form-group col-md-4">
                <label>Müşteri:</label>
                @Html.DropDownListFor(x => x.Customer.Id, customers, new { id = "updateOrderCustomerDropdown", @class = "chosen-select form-control" })
            </div>
            <div class="form-group col-md-3">
                <label>Durum:</label>
                @Html.EnumDropDownListFor(x => x.State, new { id = "updateOrderStateDropdown", @class = "chosen-select form-control", style = "width:auto" })
            </div>
            <div class="form-group col-md-1" style="margin-left:75px">
                <label>Kur:</label>
                @Html.EnumDropDownListFor(x => x.Currency, new { id = "updateOrderCurrencyDropdown", @class = "chosen-select form-control", style = "width:auto" })
            </div>
            <div class="form-group col-md-2" id="exchangeRateDiv" style="display:none">
                <label>Doviz Kuru:</label>
                <input id="exchangeRate" type="number" name="ExchangeRate" step="0.0001" placeholder="0.0000" value="@Model.ExchangeRate" />
            </div>
        </div>

        <div class="row">
            <div class="form-group col-md-4">
                @Html.LabelFor(x => x.InvoiceNumber)
                @Html.TextBoxFor(x => x.InvoiceNumber, new { @class = "chosen-select form-control", Name = "InvoiceNumber", id = "InvoiceTextBox", style = "display:inline-block" })
            </div>
            <div class="form-group col-md-4">
                @Html.LabelFor(model => model.InvoiceDate)
                @Html.TextBoxFor(model => model.InvoiceDate, new { Name = "InvoiceDate", @class = "form-control datepicker", placeholder = "Enter Drop-off date here..." })
            </div>
        </div>
        <div id="products" style="overflow: hidden;">
            <h4> Ürünler</h4>
            <hr style="margin: 10px 0;" />
            <div class="row">
                <div class="clearfix">
                    <button type="button" id="addOrderLineButton" class="btn btn-primary pull-right" style="margin-right:15px">
                        <span class="glyphicon glyphicon-plus"></span> Yeni Ürün Ekle
                    </button>
                </div>
            </div>

            <span id="noProductInfo" style="display:@(Model.OrderLines.Any() ? "none": "block" )"> Satışa ekli bir ürün bulunmamaktadır</span>


            @foreach (var orderLine in Model.OrderLines)
            {

                @Html.Action("OrderRow", "Order", new { orderLine })
            }
        </div>
        <input type="submit" class="btn btn-primary pull-right" value="Güncelle" />
    }

</div>

<script>
    $('.datepicker').datepicker({ dateFormat: 'dd.mm.yy' }); //Initialise any date pickers
    $('#updateOrderCustomerDropdown').select2({ placeholder: "Müşteri Seçin", dropdownParent: $('.vex') });
    $('#updateOrderCurrencyDropdown').select2({ placeholder: "Kur Seçin", dropdownParent: $('.vex') });
    $('#updateOrderStateDropdown').select2({ placeholder: "Durum Seçin", dropdownParent: $('.vex') });

    var InitializeScriptsForButtons = function () {
        $('.stockButton').off().on('click', function (e) {
            var productCode = e.currentTarget.parentNode.parentNode.querySelector('.productCode').value;
            ERKOSMS.AjaxAction("GetStockInformationByProductCode?productCode=" + productCode, {}, false).then(function (data) {
                e.currentTarget.parentNode.parentNode.querySelector('.stockQuantity').value = data;
                e.currentTarget.parentNode.parentNode.querySelector('.stockQuantity').readOnly = true;
            });
            ERKOSMS.AjaxAction("GetLatestPriceForProductCode?productCode=" + productCode, {}, false).then(function (data) {
                e.currentTarget.parentNode.parentNode.querySelector('.stockPrice').value = data;
                e.currentTarget.parentNode.parentNode.querySelector('.stockPrice').readOnly = true;
            });
            ERKOSMS.AjaxAction("GetProductDescriptionByProductCode?productCode=" + productCode, {}, false).then(function (data) {
                e.currentTarget.parentNode.parentNode.querySelector('.productDescription').value = data;
                e.currentTarget.parentNode.parentNode.querySelector('.productDescription').readOnly = true;
            });
        });
        $('.calculatePriceButton').off().on('click', function (e) {
            var exchangeRate = IsSelectedCurrencyDifferentThaTL() ? parseFloat($("#exchangeRate").val()) : 1;
            var quantity = e.currentTarget.parentNode.parentNode.querySelector('.quantity').value;
            var unitPrice = e.currentTarget.parentNode.parentNode.querySelector('.unitPrice').value;
            e.currentTarget.parentNode.parentNode.querySelector('.totalPrice').value = quantity * unitPrice;
            e.currentTarget.parentNode.parentNode.querySelector('.totalPrice').readOnly = true;
            e.currentTarget.parentNode.parentNode.querySelector('.totalPriceTL').value = quantity * unitPrice * exchangeRate;
            e.currentTarget.parentNode.parentNode.querySelector('.totalPriceTL').readOnly = true;
        });

        $("#UpdateOrderForm").off().on("click", ".orderRowDeleteButton", function () {
            $(this).closest('.orderRow').remove();
            if ($(".orderRow").length === 0) {
                $("#noProductInfo").show();
            }
        });

        $("#UpdateOrderForm").on("ajax-form:succeed", function (ev, data) {
            var tg = $(ev.currentTarget);
            closeParentVexModal(tg);
            $("#getAllSales").click();
        });

        $("#UpdateOrderForm").on("submit", function () {
            $(".calculatePriceButton").click();
            return true;
        });

        $("#updateOrderCurrencyDropdown").on('change', function (ev, data) {
            if (IsSelectedCurrencyDifferentThaTL()) {
                $("#exchangeRateDiv").show();
            }
            else {
                $("#exchangeRateDiv").hide();

            }
        });

        var IsSelectedCurrencyDifferentThaTL = function() {
            var selectedCurrency = $('#updateOrderCurrencyDropdown').select2('data')[0].text;
            return selectedCurrency.toLowerCase() !== "tl";
        }

        $("#exchangeRate").on("change", function (ev, data) {
            this.value = parseFloat(this.value).toFixed(4);
        });


        $("#exchangeRate").val(parseFloat($("#exchangeRate").val()).toFixed(4));


        if (IsSelectedCurrencyDifferentThaTL()) {
            $("#exchangeRateDiv").show();
        }
    }

    $(function () {

        InitializeScriptsForButtons();

        var orderRowTemplate = '@Html.Template("OrderRow", null)';
        var addOrderRow = function () {
            var html = $($.parseHTML(orderRowTemplate));
            html.appendTo($("#products"));
            InitializeScriptsForButtons();
            $("#noProductInfo").hide();
        }

    $("#addOrderLineButton")
        .on('click', addOrderRow);

    });


</script>
