@{
    ViewBag.Title = "Yeni Satış";
}

<style>
    .select2 {
        width: 100% !important;
    }
</style>

<h2>@ViewBag.Title</h2>
<hr style="margin: 10px 0;" />
@model ErkoSMS.ViewModels.OrderViewModel

@{
    var customers = (List<SelectListItem>)ViewBag.Customers;
    var exporters = (List<SelectListItem>)ViewBag.Exporters;
}
<div class="row">
    <div class="col-sm-12">

        @using (Html.BeginForm("CreateOrder", "Order", FormMethod.Post, new { data_erkosms_role = "ajax-form", id = "CreateOrderForm" }))
        {
            <div id="createSalesDiv" style="display:block">
                @Html.AntiForgeryToken()
                <div class="row">
                    <div class="col-sm-12 col-lg-9">
                        <div class="row">
                            <div class="form-group col-md-4">
                                <label>İthalatçı:</label>
                                @Html.DropDownListFor(x => x.Exporter.Id, exporters, "Bir İthalatçı Seçin", new { id = "exporterdropdown", @class = "chosen-select form-control" })
                            </div>
                            <div class="form-group col-md-4">
                                <label>Müşteri:</label>
                                @Html.DropDownListFor(x => x.Customer.Id, customers, new { id = "customerdropdown", @class = "chosen-select form-control" })
                            </div>
                            <div class="form-group col-md-4">
                                @Html.LabelFor(x => x.InvoiceNumber)
                                @Html.TextBoxFor(x => x.InvoiceNumber, new { @class = "chosen-select form-control", Name = "InvoiceNumber", id = "InvoiceTextBox", style = "display:inline-block" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group col-md-4">
                                @Html.LabelFor(model => model.InvoiceDate)
                                @Html.TextBoxFor(model => model.InvoiceDate, new { Name = "InvoiceDate", @class = "form-control datepicker", placeholder = "Enter Drop-off date here..." })
                            </div>
                            <div class="form-group col-md-4">
                                <label>Durum:</label>
                                @Html.EnumDropDownListFor(x => x.State, new { id = "statedropdown", @class = "chosen-select form-control" })
                            </div>
                            <div class="form-group col-md-3">
                                @Html.LabelFor(model => model.Comment)
                                @Html.TextAreaFor(model => model.Comment, new { style = "width:400px;height: 50px", Name = "Comment" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group col-md-2">
                                @Html.LabelFor(x => x.TransportCost)
                                @Html.EditorFor(x => x.TransportCost, new { htmlAttributes = new { @class = "form-control", Name = "TransportCost" } })
                            </div>
                            <div class="form-group col-md-2">
                                @Html.LabelFor(x => x.DeliveryType)
                                @Html.TextBoxFor(x => x.DeliveryType, new { @class = "form-control", Name = "DeliveryType" })
                            </div>
                            <div class="form-group col-md-3">
                                @Html.LabelFor(x => x.PaymentType)
                                @Html.TextBoxFor(x => x.PaymentType, new { @class = "form-control", Name = "PaymentType" })
                            </div>
                            <div class="form-group col-md-2">
                                <label>Kur:</label>
                                @Html.EnumDropDownListFor(x => x.Currency, new { id = "currencydropdown", @class = "chosen-select form-control" })
                            </div>
                            <div class="form-group col-md-3" id="exchangeRateDiv" style="display: none">
                                <label>Doviz Kuru:</label>
                                <input id="exchangeRate" name="ExchangeRate" type="number" step="0.0001" placeholder="0.0000" value="@Model.ExchangeRate" />
                            </div>
                        </div>
                    </div>
                </div>
                <hr style="margin: 10px 0;" />
                <div class="row">
                    <div class="col-sm-10">
                        <h3>Ürün Listesi</h3>
                    </div>
                    <div class="col-sm-2">
                        <div id="addProductDiv">
                            <div class="clearfix">
                                <button type="button" id="addOrderLineButton" class="btn btn-primary">
                                    <span class="glyphicon glyphicon-plus"></span> Yeni Ürün Ekle
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                <div id="products"></div>
                <hr />
                <div id="saveOrderDiv" class="clearfix">
                    <input id="saveOrderButton" type="submit" class="btn btn-primary pull-right" value="Satışı Kaydet" />
                </div>
            </div>
        }
    </div>
</div>

@using (Html.BeginForm("Import", "Order", FormMethod.Post, new { data_erkosms_role = "ajax-form", id = "ImportProductsForm" }))
{
    <div id="importProductsDiv" class="importProduct">
        @Html.AntiForgeryToken()
        <span class="btn btn-success" id="importButton" href="Order/Import" style="min-width: 250px;width: 250px">
            <span class="glyphicon glyphicon-plus"></span> Excel
            <input style="padding: 10px" type="file" name="excelfile" title=@if (Request.Browser.Browser == "IE" || Request.Browser.Browser == "InternetExplorer") { <text> "" </text>  } else { <text> " " </text> }
                   accept=".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel" />
            <input id="saveProductsButton" type="submit" class="btn btn-default" value="Ürünleri İçe Aktar" />
        </span>
    </div>
}

<script>
    $('.datepicker').datepicker({dateFormat: 'dd.mm.yy'}); //Initialise any date pickers
    $('#customerdropdown').select2({ placeholder: "Müşteri Seçin" });
    $('#currencydropdown').select2({ placeholder: "Kur Seçin" });
    $('#statedropdown').select2({ placeholder: "Durum Seçin" });

    var addOrderRow = function () {
        var html = $($.parseHTML(orderRowTemplate));
        html.appendTo($("#products"));
        $('.stockButton').off().on('click', function (e) {
            var productCode = e.currentTarget.parentNode.parentNode.querySelector('.productCode').value;
            ERKOSMS.AjaxAction("GetStockInformationByProductCode?productCode=" + productCode, {}, false).then(function (data) {
                e.currentTarget.parentNode.parentNode.parentNode.querySelector('.stockQuantity').value = data;
                e.currentTarget.parentNode.parentNode.parentNode.querySelector('.stockQuantity').readOnly = true;
            });
            ERKOSMS.AjaxAction("GetLatestPriceForProductCode?productCode=" + productCode, {}, false).then(function (data) {
                e.currentTarget.parentNode.parentNode.parentNode.querySelector('.stockPrice').value = data;
                e.currentTarget.parentNode.parentNode.parentNode.querySelector('.stockPrice').readOnly = true;
            });
            ERKOSMS.AjaxAction("GetProductDescriptionByProductCode?productCode=" + productCode, {}, false).then(function (data) {
                var [description,englishDescription] = data.substr(1, data.length - 2).split(",");
                e.currentTarget.parentNode.parentNode.parentNode.querySelector('.productDescription').value = description;
                e.currentTarget.parentNode.parentNode.parentNode.querySelector('.productDescription').readOnly = true;

                e.currentTarget.parentNode.parentNode.parentNode.querySelector('.productEnglishDescription').value = englishDescription;
                e.currentTarget.parentNode.parentNode.parentNode.querySelector('.productEnglishDescription').readOnly = true;
            });
        });
        $('.calculatePriceButton').off().on('click', function (e) {
            var exchangeRate = IsSelectedCurrencyDifferentThaTL() ? parseFloat($("#exchangeRate").val()) : 1;
            var quantity = e.currentTarget.parentNode.parentNode.parentNode.querySelector('.quantity').value;
            var unitPrice = e.currentTarget.parentNode.parentNode.parentNode.querySelector('.unitPrice').value;
            e.currentTarget.parentNode.parentNode.parentNode.querySelector('.totalPrice').value = quantity * unitPrice;
            e.currentTarget.parentNode.parentNode.parentNode.querySelector('.totalPrice').readOnly = true;
            e.currentTarget.parentNode.parentNode.parentNode.querySelector('.totalPriceTL').value = quantity * unitPrice * exchangeRate;
            e.currentTarget.parentNode.parentNode.parentNode.querySelector('.totalPriceTL').readOnly = true;
        });
    }


    $(function () {
        addOrderRow();
    });

    var orderRowTemplate = '@Html.Template("OrderRow", null)';
    $("#addOrderLineButton")
        .on('click', addOrderRow);

    $("#CreateOrderForm").off().on("click", ".orderRowDeleteButton", function () {
        $(this).closest('.orderRow').remove();
    });

    $("#CreateOrderForm").on('ajax-form:succeed', function (ev, data) {
        vex.dialog.alert({unsafeMessage:data.result.Data});
    });


    $("#CreateOrderForm").on("submit", function () {
        $(".calculatePriceButton").click();
        return true;
    });

    $("#ImportProductsForm").on('ajax-form:succeed', function (ev, data) {
        $("#ImportProductsForm").hide();
        $('#products').empty();
        for (let i = 0; i < data.result.length; i++) {
            addOrderRow();
        }

        for (let i = 0; i < data.result.length; i++) {
            document.getElementsByClassName("productCode")[i].value = data.result[i].ProductCode;
            document.getElementsByClassName("productDescription")[i].value = data.result[i].ProductDescription;
            document.getElementsByClassName("productEnglishDescription")[i].value = data.result[i].ProductEnglishDescription;
            document.getElementsByClassName("stockQuantity")[i].value = data.result[i].StokQuantity;
            document.getElementsByClassName("unitPrice")[i].value = data.result[i].UnitPrice;
            document.getElementsByClassName("quantity")[i].value = data.result[i].Quantity;
            document.getElementsByClassName("totalPrice")[i].value = data.result[i].TotalPrice;
        }
    });

    $("#currencydropdown").on('change', function (ev, data) {
        if (IsSelectedCurrencyDifferentThaTL()) {
            $("#exchangeRateDiv").show();
        }
        else {
            $("#exchangeRateDiv").hide();

        }
    });

    var IsSelectedCurrencyDifferentThaTL = function() {
        var selectedCurrency = $('#currencydropdown').select2('data')[0].text;
        return selectedCurrency.toLowerCase() !== "tl";
    }

    $("#exchangeRate").on("change", function (ev, data) {
        this.value = parseFloat(this.value).toFixed(4);
    });

    $("#exchangeRate").val(parseFloat($("#exchangeRate").val()).toFixed(4));


</script>
