@using System.Text.RegularExpressions

<div style="margin-top: 20px">
    <table id="ordersTable" class="table table-bordered table-condensed table-hover table-responsive table-striped"></table>
</div>

<script>
    var destroyTable = function () {
        var tb = $("#ordersTable");

        if ($.fn.dataTable.isDataTable(tb))
            tb.DataTable().destroy();

        tb.empty();
    };

    $('#ordersTable').on('click', 'td.editor-edit', function (e) {
        e.preventDefault();
        var rowToBeUpdated = $(this).closest('tr')[0];
        var orderId = rowToBeUpdated.cells[0].innerText;
        ERKOSMS.GetAjaxDialog("EditOrderPacking?orderId=" + orderId, {}, false).then(function () {
        }), function (data) {
            ERKOSMS.ShowWarning(data);
        }
    });

    var addImporter = function (doc, customerName, customerAddress) {
        doc.setFont("turkish", "bold");
        doc.setFontSize(7);
        var y = 28;
        doc.text(15, y, customerName);
        y += 3;
        var address = customerAddress.split("\n");
        doc.setFont("turkish", "normal");
        doc.setFontSize(6);
        for (var i = 0; i < address.length; i++) {
            var line = address[i];
            doc.text(15, y, line);
            y += 2;
        }
    }

    var addHeaderToEachPage = function (doc, invoiceDate, invoiceNo,customerName, customerAddress ) {
        for (var i = 1; i <= doc.getNumberOfPages(); i++) {

            doc.setFont("turkish", "bold");
            doc.setFontSize(12);

            var width = doc.internal.pageSize.getWidth();
            doc.text(width / 2, 10, 'PACKING LIST', { align: 'center' });

            doc.setFontSize(5);
            doc.text(175, 12, 'Invoice No    : ' + invoiceNo);
            doc.text(175, 14, 'Invoice Date : ' + invoiceDate);


            doc.setLineWidth(0.3);
            doc.setDrawColor(0, 0, 0);
            doc.roundedRect(10, 20, 95, 25, 3, 3, 'S');
            doc.setFontSize(8);
            doc.text(15, 25, 'IMPORTER:');
           


            doc.setFontSize(5);
            doc.setFont("turkish", "normal");
            addImporter(doc, customerName, customerAddress);


            doc.setPage(i);
        }
    }

    $('#ordersTable').on('click', 'td.editor-export', function (e) {
        debugger;
        e.preventDefault();
        var rowToBeUpdated = $(this).closest('tr')[0];
        var orderId = rowToBeUpdated.cells[0].innerText;
        var invoiceDate = rowToBeUpdated.cells[2].innerText;
        var invoiceNo = rowToBeUpdated.cells[3].innerText;
        var customerName = rowToBeUpdated.cells[4].innerText;
        var customerAddress = rowToBeUpdated.cells[10].innerText;
        ERKOSMS.AjaxAction("GetPackedProductsExportInfo?orderId=" + orderId, {}, false).then(function (data) {
            debugger;
            var doc = new window.jspdf.jsPDF();
            doc.autoTable({
                head: [['Case No', 'Dimensions', 'Quantity', 'Net KG', 'Gross KG', 'Code', 'Description']],
                body: data.map(function (a) { return Object.values(a) }),
                theme: 'grid',
                margin: { top: 50, left: 10 },
                headStyles: { fillColor: [182, 191, 182] }
            });

            addHeaderToEachPage(doc, invoiceDate, invoiceNo, customerName, customerAddress);

            var dateNow = window.moment(new Date(), "DD.MM.YYYY").format("DD_MM_YYYY_HHmmss");
            var filename = "PackingList_" + dateNow + ".pdf";
            doc.save(filename);


        }), function (data) {
            ERKOSMS.ShowWarning(data);
        }
    });



    var getOrders = function (ajaxAction) {
        destroyTable();
        var tb = $("#ordersTable");
        ERKOSMS.AjaxAction(ajaxAction, {
            type: 'GET'
        }).then(function (data) {
            var columns = [
                { title: "Id", data: "OrderId", className: "data" },
                { title: "Satış Başlangıç Tarihi", data: "SalesStartDate", className: "data", type: "date" },
                { title: "Fatura Tarihi", data: "InvoiceDate", className: "data", type: "date" },
                { title: "Fatura No", data: "InvoiceNumber", className: "data" },
                { title: "Müşteri", data: "Customer.Name", className: "data" },
                { title: "Müşteri Ülkesi", data: "Customer.Country", className: "data" },
                { title: "Tutar", data: "TotalPrice", className: "data" },
                { title: "Kur", data: "Currency", className: "data" },
                { title: "Tutar(TL)", data: "TotalPriceTL", className: "data" },
                { title: "Durum", data: "SalesState", className: "data" },
                { title: "Müşteri Adresi", data: "Customer.Address", className: "hide_column" },
                {
                    data: null,
                    className: "dt-center editor-export",
                    defaultContent: '<span class="btn btn-primary"><span class="glyphicon glyphicon-export"></span> Paketleme Listesi Çıkart</span>',
                    orderable: false
                },
                {
                    data: null,
                    className: "dt-center editor-edit",
                    defaultContent: '<span class="btn btn-info"><span class="glyphicon glyphicon-shopping-cart"></span> Paketlemeyi Düzenle</span>',
                    orderable: false
                }
            ];

            ERKOSMS.AjaxAction(ajaxAction, {}, false).then(function (data) {
                debugger;
                var datatable = tb.DataTable({
                    autoWidth: true,
                    columns: columns,
                    data: data,
                    sDom: '<"top"Blif<"clear">>rt<"bottom"ip<"clear">>',
                    buttons: [
                        {
                            extend: 'csv',
                            charset: 'UTF-8',
                            fieldSeparator: ';',
                            bom: true,
                            text: '<button type="button" class="btn btn-primary pull-right"><span class="glyphicon glyphicon-export"></span>Dışa Aktar</button ><br>',
                            exportOptions: {
                                columns: ".data"
                            },
                            filename: function () {
                                var dateNow = window.moment(new Date(), "DD.MM.YYYY").format("DD_MM_YYYY_HHmmss");
                                return "Satışlar_" + dateNow;
                            },
                        },
                    ],
                    aaSorting: [], // Initial sorting
                    bInfo: true, // Info is not shown because the total count to show is not known
                    searching: true, // Disable searching TODO: Enable searching if necessary
                    paging: true, // Disable paging in outstanding
                    pageLength: 50,
                    deferRender: true,
                    columnDefs: [
                        {
                            targets: [1, 2],
                            render: formatDate
                        },
                        {
                            targets: [7],
                            render: formatCurrency
                        },
                        {
                            targets: [9],
                            render: formatState
                        }
                    ]
                });
            });
        });
    }
    var getPackedOrders = function () {
        return getOrders("GetPackedOrders");
    }

    getPackedOrders();

    var formatDate = function (date) {
        if (date == null) {
            return '';
        }
        else {
            return window.moment(date).format("DD-MM-YYYY");
        }
    }

    var formatCurrency = function (data) {
        if (data == 0) {
            return "TL";
        }
        else if (data == 1) {
            return "EUR";
        }
        else if (data == 2) {
            return "USD";
        }
    }

    var formatState = function (data) {
        if (data == -1) {
            return "";
        }
        else if (data == 0) {
            return "İç Satış İletildi";
        }
        else if (data == 1) {
            return "Fatura Kesildi - Yüklendi";
        }
        else if (data == 2) {
            return "Paketleme Bekleniyor";
        }
        else if (data == 3) {
            return "Nakliye Bekleniyor";
        }
        else if (data == 4) {
            return "Ödeme Geldi - Nakliye Bekleniyor";
        }
        else if (data == 5) {
            return "Paketleme Hazır";
        }
        else if (data == 6) {
            return "Paketleme Hazır - Ödeme Bekleniyor";
        }
        else if (data == 7) {
            return "Reddedildi";
        }
        else if (data == 8) {
            return "Cevap Bekleniyor";
        }
        else if (data == 9) {
            return "Satın Alma Talep Edildi";
        }
        else if (data == 10) {
            return "Satın Alma İşleme Alındı";
        }
        else if (data == 11) {
            return "Satın Alma Başarılı";
        }
        else if (data == 12) {
            return "Satın Alma Başarısız";
        }
    }
</script>
